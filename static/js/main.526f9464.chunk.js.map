{"version":3,"sources":["reducers/selectedItem.js","reducers/index.js","reducers/toDoList.js","components/ToDoList/ToDoList.js","action/index.js","components/ToDoList/toDoListContainer.js","components/Comments/Comments.js","components/Comments/commentsContainer.js","index.js","components/App.js"],"names":["combineReducers","toDoList","state","action","getDataFromLocalStorage","localStorage","getItem","undefined","JSON","parse","type","arr","push","payload","result","item","id","arrayOfComments","tmp","convertToJson","stringify","setItem","selectedItem","ToDoList","props","setTasks","e","setState","taskName","target","value","saveDataToStore","obj","tasks","length","name","addData","addDataTolocalStorage","preventDefault","highlight","index","selectedItemNumber","removeItem","stopPropagation","nextProps","this","array","className","onSubmit","TextField","label","autoComplete","margin","variant","onChange","Button","disabled","map","highlightToggle","key","onClick","color","React","Component","data","addMessage","text","connect","dispatch","bindActionCreators","Comments","keydownHandler","message","keyCode","ctrlKey","commentsArray","renderComments","comment","isSelectedItem","prevProps","prevState","document","addEventListener","multiline","rows","placeholder","store","createStore","AllReducers","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.526f9464.chunk.js","sourcesContent":["export default function(state={}, action){\r\n    switch(action.type){\r\n        case \"SELECRED_ITEM\":\r\n            let result = {...state, selectedItem: action.payload};\r\n            return result\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import {combineReducers} from 'redux';\r\nimport toDoList from './toDoList';\r\nimport selectedItem from './selectedItem';\r\n\r\nexport default combineReducers({\r\n    toDoList,\r\n    selectedItem\r\n});","export default function(state, action){\r\n    let getDataFromLocalStorage = localStorage.getItem('session');\r\n    if(state === undefined && getDataFromLocalStorage !== null){\r\n        let convertToArray = JSON.parse(getDataFromLocalStorage);\r\n       return convertToArray\r\n    } else if (state === undefined) {\r\n        return []}\r\n    switch(action.type){\r\n        case \"ADD_DATA\":\r\n            let arr = [...state]; \r\n            arr.push(action.payload);\r\n            return arr;\r\n        case \"ADD_MESSAGE\":\r\n            let result = [...state]\r\n            for(let item of result){\r\n                if(item.id === action.payload[1]){\r\n                    item.arrayOfComments = [...item.arrayOfComments, action.payload[0]]\r\n                }\r\n            }\r\n            return result;\r\n        case \"REMOVE_ITEM\":\r\n            let tmp = [];\r\n            for(let item of state){\r\n                if(item.id !== action.payload){\r\n                    tmp.push(item);\r\n                }\r\n            }\r\n            return tmp\r\n        case \"ADD_DATA_TO_LOCAL-STORAGE\":\r\n            let convertToJson = JSON.stringify([...state]);\r\n            localStorage.setItem('session', convertToJson);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport class ToDoList extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedItemNumber: null,\r\n            taskName: '',\r\n            id: 0\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n        this.setState({id: nextProps.tasks.length});\r\n    } \r\n    setTasks=(e)=>{\r\n        this.setState({taskName: e.target.value})\r\n    }\r\n    saveDataToStore=(e)=>{\r\n        let obj = {};\r\n        obj.id = this.state.id;\r\n        for(let item of this.props.tasks){\r\n            if(item.id === this.state.id){\r\n                obj.id = this.props.tasks.length+1;\r\n            }\r\n        }\r\n        obj.name = this.state.taskName;\r\n        obj.arrayOfComments = [];\r\n        this.props.addData(obj);\r\n        this.setState({ taskName: ''});\r\n        this.props.addDataTolocalStorage();\r\n        e.preventDefault();\r\n    }\r\n    highlight=(index)=>{\r\n        this.setState({selectedItemNumber: index})\r\n    }\r\n    removeItem=(e, id)=>{\r\n        this.props.removeItem(id);\r\n        this.props.addDataTolocalStorage();\r\n        e.stopPropagation()\r\n    }\r\n    render(){\r\n        let array = this.props.tasks ? this.props.tasks : [];\r\n        \r\n        return(\r\n            <div className=\"wrapp-to-do-list\">\r\n                <h3 className='title'>Items</h3>\r\n                <form onSubmit={this.saveDataToStore}>\r\n                    <TextField\r\n                        id=\"outlined-password-input\"\r\n                        label=\"Type name here...\"\r\n                        className=\"task-fild\"\r\n                        autoComplete=\"current-password\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        value={this.state.taskName}\r\n                        onChange={(e)=>this.setTasks(e)}\r\n                    />.\r\n                    <Button variant=\"contained\" className=\"add-new-task\" type=\"submit\" disabled={this.state.taskName === '' ? true : false} >Add new</Button>\r\n                </form>\r\n                <div>\r\n                    {\r\n                        array.map((item, index)=>{\r\n                            let highlightToggle = ''\r\n                            if(item.id === this.state.selectedItemNumber){\r\n                                highlightToggle = 'wrapp-tasks highlight'\r\n                            }else{\r\n                                highlightToggle = 'wrapp-tasks'\r\n                            }\r\n                            return(\r\n                                <div className={highlightToggle} key={index}>\r\n                                    <div onClick={()=>{this.props.selectedItem(index); this.highlight(item.id)}} className='task-item'>\r\n                                        <div className='wrapp-selected-task'>\r\n                                            <p>{item.name}</p>\r\n                                            <span className='number-of-comments'>{item.arrayOfComments.length}</span>\r\n                                        </div>\r\n                                        <Button onClick={(e)=>{this.removeItem(e, item.id)}} variant=\"outlined\" color=\"secondary\" className='delete-task-button'>Delete</Button> \r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","export const addData = (data) => {\r\n    return{\r\n         type: 'ADD_DATA',\r\n         payload: data\r\n    } \r\n};\r\nexport const selectedItem = (index) => {\r\n    return{\r\n         type: 'SELECRED_ITEM',\r\n         payload: index\r\n    } \r\n};\r\nexport const addMessage = (text, item) => {\r\n    return{\r\n         type: 'ADD_MESSAGE',\r\n         payload: [text, item]\r\n    } \r\n};\r\nexport const removeItem = (index) => {\r\n    return{\r\n         type: 'REMOVE_ITEM',\r\n         payload: index\r\n    } \r\n};\r\nexport const addDataTolocalStorage = () => {\r\n    return{\r\n         type: 'ADD_DATA_TO_LOCAL-STORAGE'\r\n    } \r\n};\r\n\r\n","import {connect} from 'react-redux';\r\nimport {ToDoList} from './ToDoList';\r\nimport {addData, selectedItem, removeItem, addDataTolocalStorage} from '../../action/index';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nconst  mapStateToProps = (state)=>{\r\n    return {\r\n        tasks: state.toDoList,\r\n        item: state.selectedItem ? state.selectedItem.selectedItem : null\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({addData, selectedItem, removeItem, addDataTolocalStorage},dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoList);","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport class Comments extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            isSelectedItem: false,\r\n            commentsArray: [],\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.item !== undefined){\r\n            this.setState({isSelectedItem: true})\r\n        }\r\n        if(nextProps.tasks.length === 0){\r\n            this.setState({isSelectedItem: false});\r\n            this.setState({commentsArray: []});\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.tasks.length !== this.props.tasks.length) {\r\n            this.setState({isSelectedItem: false});\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        document.addEventListener('keydown', this.keydownHandler);\r\n    }\r\n    keydownHandler=(e)=>{\r\n        if(this.state.message !== ''){\r\n            if(e.keyCode===13 && e.ctrlKey){\r\n                this.props.addMessage(this.state.message, this.props.item);\r\n                this.setState({commentsArray: this.props.tasks});\r\n                this.setState({message: ''});\r\n                this.props.addDataTolocalStorage();\r\n            }\r\n        }\r\n        \r\n    }\r\n    renderComments=()=>{\r\n        for(let item of this.props.tasks){\r\n            if(item.id === this.props.item){\r\n                return(\r\n                    <div>\r\n                        {\r\n                            item.arrayOfComments.map((comment, index)=>{\r\n                                return(\r\n                                    <div className='wrapp-render-comments' key={index}>\r\n                                        <div className='avatar'></div>\r\n                                        <p className='comment'>{comment}</p>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n    render(){\r\n        if(!this.state.isSelectedItem){\r\n            return (\r\n                <div className='wrapp-comments'>\r\n                    <p className='notice'>Please enter a name for the task and select it so you can post comments...</p>\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className='wrapp-comments'>\r\n                    <h3 className='title'>Comments # {this.props.item + 1}</h3>\r\n                    {\r\n                        this.renderComments()\r\n                    }\r\n                    <div className='wrapp-input-field'>\r\n                        <div className='color'></div>\r\n                        <TextField\r\n                            multiline={true}\r\n                            rows={5}\r\n                            placeholder=\"Click to add a comment Ctrl+Enter\"\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            value={this.state.message}\r\n                            onChange={(e)=>this.setState({message: e.target.value})}\r\n                            className='text-field'\r\n                        />\r\n                    </div>\r\n                   \r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}","import {connect} from 'react-redux';\r\nimport {Comments} from './Comments';\r\nimport {addMessage, addDataTolocalStorage} from '../../action/index';\r\nimport {bindActionCreators} from 'redux';\r\n\r\nconst  mapStateToProps = (state)=>{\r\n    return {\r\n        tasks: state.toDoList,\r\n        item: state.selectedItem ? state.selectedItem.selectedItem : null\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({addMessage, addDataTolocalStorage},dispatch)\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport AllReducers from './reducers/index';\nimport {App} from './components/App';\n\nconst store = createStore(AllReducers);\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App/>\n    </Provider>, \n    document.getElementById('root')\n);\n","import React from 'react';\r\nimport ToDoList from './ToDoList/toDoListContainer';\r\nimport Comments from './Comments/commentsContainer';\r\nimport '../style/app.css';\r\nimport '../style/to-do-list.css';\r\nimport '../style/comments.css';\r\n\r\nexport const App = () =>(\r\n    <div className=\"app-wrapper\">\r\n        <aside className=\"left-side\">\r\n            <h3>DAIRY APP</h3>\r\n            <p>Comment with no sense</p>\r\n        </aside>\r\n        <ToDoList/>\r\n        <Comments/>\r\n    </div>\r\n);"],"sourceRoot":""}